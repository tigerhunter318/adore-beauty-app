/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * npx react-native-module-init
 *
 * https://github.com/facebook/react-native
 */

/* eslint-disable no-console */

import React, {Component, useEffect, useRef, useState} from 'react'
import {Button, ActivityIndicator, StyleSheet, Text, View, ScrollView} from 'react-native'
import {BraintreeApplePayButton, ReactNativeBraintreePayments} from 'react-native-braintree-payments'

const styles = StyleSheet.create({
  scroll: {
    flex: 1,
    backgroundColor: '#F5FCFF',
  },
  container: {
    paddingTop: 100,
    flex: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  box: {
    width: 60,
    height: 60,
    marginVertical: 20,
    flex: 1,
  },
})

const initialPaymentItems = [
  {label: 'product 1', amount: 20.0},
  {label: 'product 2', amount: '10.00'},
  {label: 'product 3', amount: '2.30'},
  // {label: 'Adore Beauty', amount: 30}, //total
]

const localShipping = [
  {
    summary: 'Free shipping',
    detail: 'Might arrive, might not 🤷‍',
    identifier: 'free',
    amount: '0.00',
  },
  {
    summary: 'Express shipping',
    detail: 'Fast but expensive',
    identifier: 'fast',
    amount: 4.99,
  },
]

const internationalShipping = [
  {
    summary: 'international airmail',
    detail: 'international airmail ✈️',
    identifier: 'international-airmail',
    amount: 10.0,
  },
  {
    summary: 'Express international',
    detail: 'Express international ✈️',
    identifier: 'international-express',
    amount: 20.0,
  },
]

const exampleBillingName = {
  emailAddress: 'joe@example.com',
  phoneNumber: '0408 000 111',
  name: {
    givenName: 'Joe',
    familyName: 'Blogs',
  },
}

const exampleShippingContact = {
  emailAddress: 'jane@example.com',
  phoneNumber: '0404 000 555',
  name: {
    givenName: 'Jane',
    familyName: 'Doe',
  },
  postalAddress: {
    street: '1 main st',
    subLocality: '',
    city: 'Melbourne',
    subAdministrativeArea: '',
    state: 'VIC',
    postalCode: '3000',
    country: 'Australia',
    ISOCountryCode: 'AU',
  },
}

const App = () => {
  const [clientToken, setClientToken] = useState(null)
  const [loading, setLoading] = useState(null)
  const [postalAddress, setPostalAddress] = useState(null)
  const [paymentItems, setPaymentItems] = useState([...initialPaymentItems])
  const [shippingMethods, setShippingMethods] = useState(null)
  const [selectedShippingMethod, setSelectedShippingMethod] = useState(null)
  const [paymentAuthorization, setPaymentAuthorization] = useState(null)
  const [transaction, setTransaction] = useState(null)

  const fetchClientToken = async () => {
    setLoading(true)
    const response = await fetch('https://braintree-sample-merchant.herokuapp.com/client_token')
    const json = await response.json()
    const token = json.client_token
    setClientToken(token)
    setLoading(false)
  }

  const handleReset = () => {
    setClientToken(null)
    setLoading(null)
    setShippingMethods(null)
  }

  const handleAuthorization = ({nativeEvent: data}) => {
    console.info('68', '', 'handleAuthorization', data)
  }
  const handleSelectShippingContact = ({nativeEvent: data}) => {
    console.log('80', '', 'handleSelectShippingContact', data)
    setPostalAddress(data.postalAddress)
    updateShippingMethods(data.postalAddress)
  }
  const updateShippingMethods = async address => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const methods = address?.country === 'Australia' ? localShipping : internationalShipping
        setShippingMethods(methods)
        resolve(methods)
      }, 2 * 1000) //simulate async
    })
  }
  const updatePaymentItems = shippingMethod => {
    const shippingItem = shippingMethod && shippingMethods?.find(item => item.identifier === shippingMethod.identifier)
    const nextItems = paymentItems.filter(item => item.name !== 'shipping') //remove current shipping cost
    if (shippingItem) {
      setPaymentItems([...nextItems, {name: 'shipping', label: shippingItem.summary, amount: shippingItem.amount}])
    } else {
      setPaymentItems([...nextItems])
    }
  }
  const handleSelectShippingMethod = ({nativeEvent: shippingMethod}) => {
    console.log('110', '', 'handleSelectShippingMethod', '')
    updatePaymentItems(shippingMethod)
    setSelectedShippingMethod(shippingMethod)
  }
  const handleApplePayButtonPress = evt => {
    console.info('68', '', 'handleApplePayButtonPress', new Date())
  }
  const handleApplePayButtonWithShippingContactPress = evt => {
    console.log('159', '', 'handleApplePayButtonWithShippingContactPress', '')
    // setShippingMethods(localShipping)
    updateShippingMethods(exampleShippingContact.postalAddress)
  }
  const handleAuthorizePayment = ({nativeEvent: data}) => {
    console.log('95', '', 'handleAuthorizePayment', data)
    setPaymentAuthorization(data)
    setTimeout(() => {
      setTransaction({orderId: 'test001', success: true})
      // setTransaction({ success:false}) // failed payment
    }, 2 * 1000) //simulate async
  }
  const preparePaymentItems = () => {
    const total = paymentItems.reduce((acc, item) => acc + parseFloat(item.amount), 0.0)
    const totalPaymentItems = [...paymentItems, {label: 'Cart total', amount: total}]
    // console.log('124', '', 'preparePaymentItems', totalPaymentItems)
    return totalPaymentItems
  }
  const handleDismiss = () => {
    console.log('131', '', 'handleDismiss', '')
    setShippingMethods(null)
    updatePaymentItems(null)
  }
  const handleTransactionComplete = () => {
    alert('complete')
  }
  const fetchStatus = async () => {
    const response = await ReactNativeBraintreePayments.canMakeApplePayments()
    console.log('145', '', 'fetchStatus', response)
    // alert(response)
  }
  const handleMount = () => {
    fetchStatus()
    fetchClientToken()
  }
  useEffect(handleMount, [])

  console.log('139', '', 'App', shippingMethods)

  return (
    <ScrollView style={styles.scroll}>
      <View style={styles.container}>
        <Text style={styles.welcome}>☆ReactNativeBraintreePayments example☆</Text>

        <Text style={{paddingVertical: 5}}>Payment only</Text>
        <View>
          <BraintreeApplePayButton
            buttonType={'plain'}
            clientToken={clientToken}
            paymentItems={preparePaymentItems(paymentItems)}
            // shippingMethods={shippingMethods}
            // onSelectShippingContact={handleSelectShippingContact}
            // onSelectShippingMethod={handleSelectShippingMethod}
            onAuthorizePayment={handleAuthorizePayment}
            onTransactionComplete={handleTransactionComplete}
            transaction={transaction}
            onDismiss={handleDismiss}
            disabled={!clientToken}
            opacity={clientToken ? 1 : 0.5}
            enableShipping={false}
          />
        </View>

        <Text style={{paddingVertical: 5}}>Fetch shipping contact</Text>
        <View>
          <BraintreeApplePayButton
            buttonType={'checkout'}
            clientToken={clientToken}
            paymentItems={preparePaymentItems(paymentItems)}
            shippingMethods={shippingMethods}
            onSelectShippingContact={handleSelectShippingContact}
            onSelectShippingMethod={handleSelectShippingMethod}
            onAuthorizePayment={handleAuthorizePayment}
            onTransactionComplete={handleTransactionComplete}
            transaction={transaction}
            onDismiss={handleDismiss}
            disabled={!clientToken}
            opacity={clientToken ? 1 : 0.5}
            enableShipping={true}
          />
        </View>

        <Text style={{paddingVertical: 5}}>Set shipping contact</Text>
        <View>
          <BraintreeApplePayButton
            buttonType={'buy'}
            clientToken={clientToken}
            paymentItems={preparePaymentItems(paymentItems)}
            shippingMethods={shippingMethods}
            onSelectShippingContact={handleSelectShippingContact}
            onSelectShippingMethod={handleSelectShippingMethod}
            onAuthorizePayment={handleAuthorizePayment}
            onTransactionComplete={handleTransactionComplete}
            transaction={transaction}
            onDismiss={handleDismiss}
            disabled={!clientToken}
            opacity={clientToken ? 1 : 0.5}
            enableShipping={true}
            shippingContact={exampleShippingContact}
            onPaymentPress={async ref => {
              setLoading(true)
              await updateShippingMethods(exampleShippingContact.postalAddress)
              ref.createPaymentRequest()
              setLoading(false)
            }}
          />
          <Text style={{paddingVertical: 5}}>Set billing name only</Text>
          <View>
            <BraintreeApplePayButton
              buttonType={'pay'}
              clientToken={clientToken}
              paymentItems={preparePaymentItems(paymentItems)}
              shippingMethods={shippingMethods}
              onSelectShippingContact={handleSelectShippingContact}
              onSelectShippingMethod={handleSelectShippingMethod}
              onAuthorizePayment={handleAuthorizePayment}
              onTransactionComplete={handleTransactionComplete}
              transaction={transaction}
              onDismiss={handleDismiss}
              disabled={!clientToken}
              opacity={clientToken ? 1 : 0.5}
              enableShipping={true}
              shippingContact={exampleBillingName}
              onPaymentPress={async ref => {
                setLoading(true)
                ref.createPaymentRequest()
                setLoading(false)
              }}
            />
          </View>
        </View>

        {postalAddress?.city && (
          <Text>
            {postalAddress.city} {postalAddress.postalCode}
          </Text>
        )}
        {paymentAuthorization?.nonce && (
          <View>
            <Text numberOfLines={1}>nonce: {paymentAuthorization.nonce}</Text>
            <Text>
              shipping: {paymentAuthorization.shippingContact.emailAddress}{' '}
              {paymentAuthorization.shippingContact.postalAddress.street}
            </Text>
          </View>
        )}

        {!clientToken && <Button onPress={fetchClientToken} title={'Fetch Client Token'} />}
        {clientToken && (
          <>
            <Button onPress={handleReset} title={'Reset'} />
          </>
        )}

        <ActivityIndicator animating={loading} size={'small'} />

        {clientToken && (
          <Text style={styles.instructions} numberOfLines={1}>
            clientToken: {clientToken}
          </Text>
        )}
      </View>
    </ScrollView>
  )
}
export default App
